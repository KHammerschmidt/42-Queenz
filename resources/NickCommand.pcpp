// #include "../includes//Command.hpp"

/* Valid nickname consists of a-z and 0-9 and size <= 63 characters. */
int Command::check_characters(std::string str)
{
	for (size_t i = 0; i < str.length(); i++)
	{
		if (!isalpha(str.c_str()[i]) && !isdigit(str.c_str()[i]))		//Leerzeichen?
			return -1;
	}

	if (str.length() >= 63)
		return -1;

	return 1;
}

/* Loop through existing users and check if nickname is already taken. */
bool Command::check_free_nickname(const std::string& nickname)
{
	std::vector<User*> user_temp = this->_server->getUsers();

	for (std::vector<User*>::iterator iter = user_temp.begin(); iter != user_temp.end(); iter++)
	{
		if ((*iter)->getNickname() == nickname)
			return false;
	}

	return true;
}

std::string Command::getWelcomeReply(User* user)
{
	std::stringstream ss;
	ss << ":" << user->getNickUserHost() << " :Welcome to the 42-Queenz.42.fr network";
	return ss.str();
}

/* Register the user's nickname */
void Command::register_nickname(void)
{
	size_t param_size = this->_parameters.size();
	std::stringstream ss;

	//no nickname specified
	if (param_size == 1)
	{
		err_command(ERR_NONICKNAMEGIVEN);
		return ;
	}

	this->sender_nickname = this->_parameters[1];

	//check for characters/digits and length
	if (check_characters(this->_parameters[1]) < 0)
	{
		err_command(ERR_ERRONEUSNICKNAME);
		return ;
	}

	//once we can connect 2 users I can check this! -->check if another user is already using this nickname
	if (check_free_nickname(this->_parameters[1]) == false)
	{
		err_command(ERR_NICKNAMEINUSE);
		return ;
	}

	std::stringstream sstr;
	//send to all users in a channel where user is member / as well to user himself?
	sstr << ":" << this->_user->getNickname() << " changed their nickname to " << this->sender_nickname << "\r\n";
	this->_user->setNickname(this->sender_nickname);
	this->_reply_message = sstr.str();
	this->_reply_state = true;								//send reply to all users in channel when user is in chat
	this->_command_state = false;

	//necessary vector or reply messages
	if (this->_user->getNickname() != "Random_User" && this->_user->getUsername() != "Random_User")
	{
		this->_reply_message = getWelcomeReply(this->_user);
		this->_user->setState(REGISTERED);
	}

	this->_parameters.clear();
}
